Ref : https://www.geeksforgeeks.org/program-page-replacement-algorithms-set-2-fifo/
Implementation – Let capacity be the number of pages that memory can hold. Let set be the current set of pages in memory.
1- Start traversing the pages.
 i) If set holds less pages than capacity.
   a) Insert page into the set one by one until 
      the size  of set reaches capacity or all
      page requests are processed.
   b) Simultaneously maintain the pages in the
      queue to perform FIFO.
   c) Increment page fault
 ii) Else 
   If current page is present in set, do nothing.
   Else 
     a) Remove the first page from the queue
        as it was the first to be entered in
        the memory
     b) Replace the first page in the queue with 
        the current page in the string.
     c) Store current page in the queue.
     d) Increment page faults.

2. Return page faults.

# 建立 queue
import queue
q = queue.Queue()

# empty 方法 |  queue 為空 返回 True 
import queue
q = queue.Queue()
print(q.empty()) # True 

# full 方法 | 如果 queue 滿了 返回 True
import queue
q = queue.Queue(1) # 指定 queue 大小
q.put('a')
print(q.full()) # True

# put 方法 和 get 方法 
import queue
q = queue.Queue()
q.put('a')
q.put('b')
print(q.get()) # output : a

# qsize 方法 | return queue 元素個素
import queue
q = queue.Queue()
q.put('a')
q.put('b')
print(q.qsize()) # output : 2


 
